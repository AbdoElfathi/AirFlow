"""
Contr√¥leur simplifi√© pour les actions de pr√©sentation - Avec gestion intelligente du diaporama
"""
import pyautogui
import time

class PresentationController:
    """Contr√¥leur simplifi√© pour les actions de pr√©sentation uniquement"""
    
    def __init__(self):
        # D√©sactiver le fail-safe de pyautogui pour √©viter les interruptions
        pyautogui.FAILSAFE = False
        self.last_gesture_time = 0
        self.is_in_slideshow = False  # Track slideshow state
        
    def execute_gesture_action(self, gesture: str, cooldown: float = 1.0):
        """Ex√©cute l'action correspondant au geste d√©tect√©"""
        current_time = time.time()
        
        # V√©rifier le cooldown
        if current_time - self.last_gesture_time < cooldown:
            return
        
        action_map = {
            "fist": self.next_slide,
            "open_hand": self.previous_slide,
            "three": self.smart_slideshow_toggle,  # Smart toggle instead of F5
            "two": lambda: self.go_to_slide(2),
            "four": lambda: self.go_to_slide(4),
        }
        
        if gesture in action_map:
            action_map[gesture]()
            self.last_gesture_time = current_time
            print(f"Geste ex√©cut√©: {gesture}")
    
    def next_slide(self):
        """Passer √† la slide suivante"""
        pyautogui.press('right')
        print("‚Üí Slide suivante")
    
    def previous_slide(self):
        """Revenir √† la slide pr√©c√©dente"""
        pyautogui.press('left')
        print("‚Üê Slide pr√©c√©dente")
    
    def smart_slideshow_toggle(self):
        """Gestion intelligente du diaporama - d√©marre ou quitte selon le contexte"""
        if not self.is_in_slideshow:
            # D√©marrer le diaporama
            pyautogui.press('f5')
            self.is_in_slideshow = True
            print("üé• D√©marrage du diaporama")
        else:
            # Quitter le diaporama
            pyautogui.press('escape')
            self.is_in_slideshow = False
            print("üö™ Sortie du diaporama")
    
    def force_start_slideshow(self):
        """Force le d√©marrage du diaporama"""
        pyautogui.press('f5')
        self.is_in_slideshow = True
        print("üé• Diaporama forc√©")
    
    def force_exit_slideshow(self):
        """Force la sortie du diaporama"""
        pyautogui.press('escape')
        self.is_in_slideshow = False
        print("üö™ Sortie forc√©e du diaporama")
    
    def go_to_slide(self, slide_number: int):
        """Aller √† une slide sp√©cifique"""
        if self.is_in_slideshow:
            # En mode diaporama, utiliser les num√©ros + Enter
            pyautogui.press(str(slide_number))
            pyautogui.press('enter')
        else:
            # En mode √©dition, utiliser Ctrl+G (PowerPoint "Go to slide")
            pyautogui.hotkey('ctrl', 'g')
            time.sleep(0.2)
            pyautogui.type(str(slide_number))
            pyautogui.press('enter')
        print(f"üìÑ Slide {slide_number}")
    
    def toggle_fullscreen_only(self):
        """Basculer uniquement le mode plein √©cran (F5 simple)"""
        pyautogui.press('f5')
        print("üñ•Ô∏è Basculer plein √©cran")
    
    def end_slideshow(self):
        """Terminer le diaporama"""
        pyautogui.press('esc')
        self.is_in_slideshow = False
        print("‚èπ Fin du diaporama")
    
    def black_screen(self):
        """√âcran noir pendant la pr√©sentation"""
        if self.is_in_slideshow:
            pyautogui.press('b')
            print("‚¨õ √âcran noir")
    
    def white_screen(self):
        """√âcran blanc pendant la pr√©sentation"""
        if self.is_in_slideshow:
            pyautogui.press('w')
            print("‚¨ú √âcran blanc")
    
    def reset_slideshow_state(self):
        """Remet √† z√©ro l'√©tat du diaporama (utile en cas de d√©synchronisation)"""
        self.is_in_slideshow = False
        print("üîÑ √âtat du diaporama r√©initialis√©")